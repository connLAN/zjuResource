
http://dl.acm.org/citation.cfm?id=2542819.2542844&coll=DL&dl=GUIDE&CFID=560081678&CFTOKEN=98055852

<<Domain-Specific Modeling Languages to improve framework instantiation>>

Frameworks are reusable software composed of concrete and abstract classes that implement the functionality of a domain. Applications reuse frameworks to enhance quality and development efficiency. However, frameworks are hard to learn and reuse. Application developers must understand the complex class hierarchy of the framework to instantiate it properly. In this paper, we present an approach to build a Domain-Specific Modeling Language (DSML) of a framework and use it to facilitate framework reuse during application development. The DSML of a framework is built by identifying the features of this framework and the information required to instantiate them. Application generators transform models created with the DSML into application code, hiding framework complexities. In this paper, we illustrate the use of our approach in a framework for the domain of business resource transactions and a experiment that evaluated the efficiency obtained with our approach.


-------------->

Authors:	Matheus C. Viana	
Ros¨ªngela A. D. Penteado	
Ant?nio F. Do Prado	
Published in:
¡¤ Journal
Journal of Systems and Software archive
Volume 86 Issue 12, December, 2013 
Pages 3123-3139 
Elsevier Science Inc. New York, NY, USA 
table of contents doi>10.1016/j.jss.2013.07.030

===============================================================================================
http://dl.acm.org/citation.cfm?id=2489812.2489817&coll=DL&dl=GUIDE&CFID=560081678&CFTOKEN=98055852

<<Creating and using domain-specific language features>>


The value that domain-specific languages provide to their users is the domain-specific language features they contain. These features provide notations from the domain of interest, as well as domain-specific analysis and optimizations. But domain-specific languages are sometimes a poor means of delivering these valuable features to their users. A challenge arises when a problem crosses multiple domains and whose programming or modeling solution could benefit from language features from all domains of interest. Using multiple domain-specific languages can become cumbersome, perhaps outweighing their benefits in the first place.

An alternative approach, advocated by this position paper, is to provide domain-specific language features to programmers and modelers as composable language extensions that they can import into their general-purpose programming or modeling language. In our view, there are three requirements for a language extension framework to be widely usable. First, language extensions should be developed independently, by domain-experts, as libraries or domain-specific languages are now. Second, extensions should be automatically composable so that programmers and modelers can pick the language extensions they want, and direct tools to compose them, without the need for writing "glue-code." Third, this composition process should not fail to yield a working compiler (or other tools) for the custom extended language. Thus, the programmer has some assurance that the extensions that they pick will work together.

We briefly describe how this vision of extensible language frameworks is supported by the Silver and Copper metaprogramming tools.

-------------->

Authors:	Ted Kaminski	University of Minnesota, Minneapolis, Minnesota
Eric Van Wyk	University of Minnesota, Minneapolis, Minnesota
Published in:
¡¤ Proceeding
GlobalDSL '13 Proceedings of the First Workshop on the Globalization of Domain Specific Languages
Pages 18-21 
ACM New York, NY, USA ?2013 
table of contents ISBN: 978-1-4503-2043-6 doi>10.1145/2489812.2489817

===============================================================================================
